syntax = "proto3";

package chittychat;

option go_package = "Chitty-Chat/proto/proto";

message SentMessage {
  string clientName = 1;
  string message = 2;
  uint32 time = 3;
}

message joinRequest {
string clientName = 1;
uint32 time = 2;
}

message leftRequest {
string clientName = 1;
uint32 time = 2;
}

message joinResponse {
string serverName = 1;
uint32 time = 2;
}

message leftResponse {
string serverName = 1;
uint32 time = 2;
}

//This part of the code is the R3 requirement: R3: The Chitty-Chat service has to broadcast every published message, together with the current logical timestamp, to all participants in the system, by using gRPC. It is an implementation decision left to the students, whether a Vector Clock or a Lamport timestamp is sent.

service Chat {
  rpc SendAndReceive(stream SentMessage) returns (stream SentMessage);
  rpc Join(joinRequest) returns (joinResponse);
  rpc Leave(leftRequest) returns (leftResponse);
}

